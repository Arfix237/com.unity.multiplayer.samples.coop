using Unity.Jobs;
using UnityEngine;

[NetworkPropertySet]
public struct ExtendedHealthPropertySet
{
    public HealthPropertySet Child;
    public int Health;
}

[NetworkPropertySet]
public struct HealthPropertySet
{
    public int Health;
}

[NetworkPropertySet]
public struct BarbarianPropertySet
{
    //[PropertyTag(Name = "Energy")]
    public int Rage;
}

[NetworkPropertySet]
public struct WizardPropertySet
{
    //[PropertyTag(Name = "Energy")]
    public int Mana;
}

// public class DamageTakenEffects
// {
//     GameObject owner;
//     int damage;
//
//     public void Execute()
//     {
//         damage *= owner.GetNetworkProperty<int>(NetworkProperty.Armor);
//         health - damage;
//         owner.GetComponent<Animator>().Play("whatever");
//     }
// }
//
// public class AI
// {
//     GameObject actor;
//
//     void DoAISTuff()
//     {
//         actor.ActivateEffect("DamageTaken");
//     }
// }

public class Example : MonoBehaviour
{

    public void Foo()
    {
        //GetNetworkPropertySet<HealthPropertySet>().Health; // this is by value access to set which is not ideal
        //var set = GetNetworkPropertySetRef<HealthPropertySet>().Health; // if ref return is used incorrectly it's by value access

        int value = this.GetNetworkProperty<int>(NetworkProperty.Energy); // enum generated by codegen, generic type instance checked by roslyn analyzer
        this.SetNetworkProperty(NetworkProperty.Health, value + 10);

        var handle = this.GetNetworkPropertyHandle();
        var job = new ExampleJob(){ Handle = handle};
        job.Schedule().Complete();
        handle.Dispose();

        // // code generated words works only on monobehaviour for other access wordset needs to be passed
        // int value = this.NetworkProperties.Health
    }

    public struct ExampleJob : IJob
    {
        public NetworkPropertyHandle Handle;

        public void Execute()
        {
            int value = Handle.GetNetworkProperty<int>(NetworkProperty.Health);
            Handle.SetNetworkProperty(NetworkProperty.Health, value + 10);
        }
    }

}
